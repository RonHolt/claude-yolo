#!/bin/bash
# File: claude-yolo

# --- Launches an Optimized Ephemeral Sandbox ---
# Default behavior is browser-based login. Use --apikey for API key authentication.

set -e
IMAGE_NAME="claude-yolo-env"
HOST_CLAUDE_CONFIG_DIR="$HOME/.claude"

# Check if Docker image exists
if ! docker image inspect "$IMAGE_NAME" &>/dev/null; then
  echo "❌ Error: Docker image '$IMAGE_NAME' not found!"
  echo "Please build the image first by running:"
  echo "  docker build -t claude-yolo-env ."
  echo "Run this command in the directory containing the Dockerfile."
  exit 1
fi

# --- Argument Parsing ---
# Default to the interactive browser login method.
AUTH_METHOD="login"
NETWORK_NAME=""
while (("$#")); do
  case "$1" in
  --apikey)
    AUTH_METHOD="apikey"
    shift
    ;;
  *)
    if [ -z "$NETWORK_NAME" ]; then NETWORK_NAME="$1"; fi
    shift
    ;;
  esac
done

# Use a bash array for cleaner Docker arguments.
DOCKER_ARGS=("--rm" "-it")
DOCKER_ARGS+=("-v" "$(pwd):/project")
DOCKER_ARGS+=("-v" "/var/run/docker.sock:/var/run/docker.sock")
DOCKER_ARGS+=("-e" "HOST_UID=$(id -u)")
DOCKER_ARGS+=("-e" "HOST_GID=$(id -g)")

# --- Authentication & Settings Handling ---
if [ "$AUTH_METHOD" == "apikey" ]; then
  # Handle the --apikey flag case.
  echo "🔑 Using ANTHROPIC_API_KEY."
  if [ -z "$ANTHROPIC_API_KEY" ]; then
    echo "❌ Error: ANTHROPIC_API_KEY environment variable is not set for --apikey mode." >&2
    exit 1
  fi
  DOCKER_ARGS+=("-e" "ANTHROPIC_API_KEY")
else
  # Handle the default case (browser login).
  echo "🔑 Using browser-based login (default). Your settings will be loaded."
  # Mount the host's config directory to a temporary, read-only location.
  # The entrypoint script will use this to bootstrap settings for the session.
  if [ -d "$HOST_CLAUDE_CONFIG_DIR" ]; then
    DOCKER_ARGS+=("-v" "$HOST_CLAUDE_CONFIG_DIR:/tmp/host-claude-config:ro")
  fi
fi

# --- Network Handling ---
if [ -n "$NETWORK_NAME" ]; then
  DOCKER_ARGS+=("--network" "$NETWORK_NAME")
  echo "✅ Connecting to Docker network: $NETWORK_NAME"
fi

echo "🚀 Launching sandbox... (A browser login may be required)"
echo "---------------------------------------------------"
docker run "${DOCKER_ARGS[@]}" "$IMAGE_NAME"
